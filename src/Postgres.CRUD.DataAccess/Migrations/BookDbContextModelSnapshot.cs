// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Postgres.CRUD.DataAccess.DatabaseContext;

#nullable disable

namespace Postgres.CRUD.DataAccess.Migrations
{
    [DbContext(typeof(BookDbContext))]
    partial class BookDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Postgres.CRUD.DataAccess.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Isbn")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Isbn")
                        .IsUnique();

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Postgres.CRUD.DataAccess.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("People");

                    b.HasDiscriminator().HasValue("Person");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Postgres.CRUD.DataAccess.Models.Instructor", b =>
                {
                    b.HasBaseType("Postgres.CRUD.DataAccess.Models.Person");

                    b.Property<DateTime>("DateHired")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Department")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Instructor");
                });

            modelBuilder.Entity("Postgres.CRUD.DataAccess.Models.Student", b =>
                {
                    b.HasBaseType("Postgres.CRUD.DataAccess.Models.Person");

                    b.Property<DateTime>("DateEnrolled")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("GPA")
                        .HasColumnType("double precision");

                    b.Property<string>("Major")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("Postgres.CRUD.DataAccess.Models.Book", b =>
                {
                    b.OwnsMany("Postgres.CRUD.DataAccess.Models.Author", "Authors", b1 =>
                        {
                            b1.Property<int>("BookId")
                                .HasColumnType("integer");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<DateTime>("Created")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Email")
                                .HasColumnType("text");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Phone")
                                .HasColumnType("text");

                            b1.Property<DateTime>("Updated")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Website")
                                .HasColumnType("text");

                            b1.HasKey("BookId", "__synthesizedOrdinal");

                            b1.ToTable("Books");

                            b1.ToJson("Authors");

                            b1.WithOwner()
                                .HasForeignKey("BookId");

                            b1.OwnsOne("Postgres.CRUD.DataAccess.Models.Address", "Address", b2 =>
                                {
                                    b2.Property<int>("AuthorBookId")
                                        .HasColumnType("integer");

                                    b2.Property<int>("Author__synthesizedOrdinal")
                                        .HasColumnType("integer");

                                    b2.Property<string>("City")
                                        .HasColumnType("text");

                                    b2.Property<string>("Country")
                                        .HasColumnType("text");

                                    b2.Property<string>("State")
                                        .HasColumnType("text");

                                    b2.HasKey("AuthorBookId", "Author__synthesizedOrdinal");

                                    b2.ToTable("Books");

                                    b2.WithOwner()
                                        .HasForeignKey("AuthorBookId", "Author__synthesizedOrdinal");
                                });

                            b1.Navigation("Address");
                        });

                    b.Navigation("Authors");
                });
#pragma warning restore 612, 618
        }
    }
}
